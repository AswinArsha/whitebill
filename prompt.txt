import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Users, UserCheck, Clock, XCircle } from "lucide-react";
import { supabase } from "../supabase";
import { Input } from "@/components/ui/input";
import NotificationDropdown from "./NotificationDropdown";
import { format } from "date-fns";
import { Select, SelectTrigger, SelectContent, SelectItem, SelectValue } from "@/components/ui/select";
import DownloadPDFButton from "./DownloadPDFButton"; // Component for generating the PDF

const Attendance = () => {
  const [attendanceData, setAttendanceData] = useState([]);
  const [totalStaff, setTotalStaff] = useState(0);
  const [present, setPresent] = useState(0);
  const [absent, setAbsent] = useState(0);
  const [late, setLate] = useState(0);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedMonth, setSelectedMonth] = useState(() => {
    const now = new Date();
    return format(now, 'MMMM yyyy');
  });
  const navigate = useNavigate();

  const officeStartTime = "10:00";
  const lateThreshold = "10:10"; // Threshold time for marking employees late

  useEffect(() => {
    fetchAttendanceDataForMonth();
  }, [selectedMonth]);

  const fetchAttendanceDataForMonth = async () => {
    const [month, year] = selectedMonth.split(" ");
    const firstDay = new Date(`${month} 1, ${year}`);
    const lastDay = new Date(firstDay.getFullYear(), firstDay.getMonth() + 1, 0);

    // Fetch staff data
    const { data: staffData, error: staffError } = await supabase.from("staff").select("*");
    if (staffError) {
      console.error("Error fetching staff data:", staffError);
      return;
    }

    // Fetch current month's attendance data
    const { data: attendanceData, error: attendanceError } = await supabase
      .from("attendance")
      .select("staff_id, date, time")
      .gte("date", format(firstDay, "yyyy-MM-dd"))
      .lte("date", format(lastDay, "yyyy-MM-dd"));
    if (attendanceError) {
      console.error("Error fetching attendance data:", attendanceError);
      return;
    }

    // Create a staff map for attendance
    const staffMap = staffData.reduce((acc, staff) => {
      acc[staff.id] = {
        id: staff.id,
        name: staff.name,
        status: "Absent",
        checkIn: "-",
        checkOut: "-",
      };
      return acc;
    }, {});

    // Process attendance data for the selected month
    attendanceData.forEach((record) => {
      const checkInTime = record.time;
      const status = checkInTime <= lateThreshold ? "Present" : "Late";

      // Set check-in and check-out times
      if (!staffMap[record.staff_id].checkIn || staffMap[record.staff_id].checkIn === "-") {
        staffMap[record.staff_id].checkIn = checkInTime;
        staffMap[record.staff_id].status = status;
      } else {
        staffMap[record.staff_id].checkOut = checkInTime;
      }
    });

    const staffList = Object.values(staffMap);
    const presentCount = staffList.filter((staff) => staff.status === "Present").length;
    const lateCount = staffList.filter((staff) => staff.status === "Late").length;
    const absentCount = staffList.filter((staff) => staff.status === "Absent").length;

    // Update state
    setAttendanceData(staffList);
    setTotalStaff(staffData.length);
    setPresent(presentCount);
    setLate(lateCount);
    setAbsent(absentCount);
  };

  // Handle navigating to individual attendance page
  const handleStaffClick = (staffId) => {
    navigate(`/home/attendance/${staffId}`);
  };

  const filteredAttendanceData = attendanceData.filter((staff) =>
    staff.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const generateMonthOptions = () => {
    const options = [];
    const currentDate = new Date();
    for (let i = 0; i < 12; i++) {
      const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);
      options.push(format(date, "MMMM yyyy"));
    }
    return options;
  };

  return (
    <div className="container ">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold">Staff Attendance Report</h1>
        <div className="flex items-center space-x-4">
          <Select value={selectedMonth} onValueChange={setSelectedMonth}>
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Select month" />
            </SelectTrigger>
            <SelectContent>
              {generateMonthOptions().map((month) => (
                <SelectItem key={month} value={month}>
                  {month}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Input
            placeholder="Search staff"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-[200px]"
          />
          <DownloadPDFButton data={filteredAttendanceData} />
          <NotificationDropdown />
        </div>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-4">
        {/* Total Employees */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Employees</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalStaff}</div>
          </CardContent>
        </Card>

        {/* Present Employees */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Present</CardTitle>
            <UserCheck className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{present}</div>
          </CardContent>
        </Card>

        {/* Late Employees */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Late</CardTitle>
            <Clock className="h-4 w-4 text-yellow-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{late}</div>
          </CardContent>
        </Card>

        {/* Absent Employees */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Absent</CardTitle>
            <XCircle className="h-4 w-4 text-red-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{absent}</div>
          </CardContent>
        </Card>
      </div>

      {/* Attendance Details Table */}
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center mb-4">
            <CardTitle>Attendance Details</CardTitle>
          </div>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Name</TableHead>
                <TableHead>Current Date</TableHead>
                <TableHead>Check In</TableHead>
                <TableHead>Check Out</TableHead>
                <TableHead>Status</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredAttendanceData.map((record) => (
                <TableRow
                  key={record.id}
                  onClick={() => handleStaffClick(record.id)}
                  className="cursor-pointer hover:bg-gray-100"
                >
                  <TableCell className="font-medium">{record.name}</TableCell>
                  <TableCell>{new Date().toISOString().split("T")[0]}</TableCell>
                  <TableCell>{record.checkIn}</TableCell>
                  <TableCell>{record.checkOut}</TableCell>
                  <TableCell>
                    <Badge
                      variant={
                        record.status === "Present"
                          ? "default"
                          : record.status === "Late"
                          ? "warning"
                          : "destructive"
                      }
                    >
                      {record.status}
                    </Badge>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
};

export default Attendance;

,
SUPABASE TABLE :
create table
  public.attendance (
    id uuid not null default extensions.uuid_generate_v4 (),
    staff_id uuid null,
    date date not null,
    time time without time zone not null,
    constraint attendance_pkey primary key (id),
    constraint attendance_staff_id_fkey foreign key (staff_id) references staff (id)
  ) tablespace pg_default;
  ,
create table
  public.staff (
    id uuid not null default extensions.uuid_generate_v4 (),
    name text not null,
    department text not null,
    position text not null,
    constraint staff_pkey primary key (id)
  ) tablespace pg_default;
  ,add extra columns for
Days Present,	Days Late,	Days Absent and Average Check-in of for each employee in the Attendance Details table in Attendance.jsx .there are two time values for a employee in a day , one which represent checkin and other check out , based on it please provide the correct detaisl of employees whose Days Present,	Days Late,	Days Absent and Average Check-in.


