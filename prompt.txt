import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Card, CardHeader, CardContent, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Table, TableBody, TableCell, TableHead, TableRow } from "@/components/ui/table";
import { Trash2 } from "lucide-react";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { supabase } from "../supabase";
import NotificationDropdown from "./NotificationDropdown";

const Attendance = () => {
  const [staff, setStaff] = useState([]);
  const [newStaff, setNewStaff] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    fetchStaff();
  }, []);

  const fetchStaff = async () => {
    const { data, error } = await supabase.from("staff").select("*");
    if (error) console.error("Error fetching staff:", error);
    else setStaff(data);
  };

  const handleAddStaff = async () => {
    if (newStaff.trim() !== "") {
      const { data, error } = await supabase.from("staff").insert([{ name: newStaff.trim() }]);
      if (error) {
        console.error("Error adding staff:", error);
      } else {
        setStaff([...staff, data[0]]);
        setNewStaff("");
      }
    }
  };

  const handleDeleteStaff = async (id) => {
    const { error } = await supabase.from("staff").delete().eq("id", id);
    if (error) {
      console.error("Error deleting staff:", error);
    } else {
      setStaff(staff.filter((member) => member.id !== id));
    }
  };

  const handleStaffClick = (id) => {
    // Navigate to the staff attendance details page
    navigate(`/home/attendance/${id}`);
  };

  return (
    <div className="">
      <div className="flex justify-between items-center ">
        <h2 className="text-2xl font-bold mb-4">Attendance</h2>
        <NotificationDropdown />
      </div>
      <Card className="mb-6 bg-gray-50">
        <CardHeader>
      
        </CardHeader>
        <CardContent>
          <div className="mb-4 flex space-x-4">
            <Input
              placeholder="Add new staff member"
              value={newStaff}
              onChange={(e) => setNewStaff(e.target.value)}
            />
            <Button onClick={handleAddStaff}>
              Add Staff
            </Button>
          </div>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Name</TableCell>
                <TableCell>Action</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {staff.map((member) => (
                <TableRow key={member.id}>
                  <TableCell
                    className="cursor-pointer hover:underline"
                    onClick={() => handleStaffClick(member.id)} // Updated to use `/home/attendance/:id`
                  >
                    {member.name}
                  </TableCell>
                  <TableCell>
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button variant="ghost" size="icon">
                          <Trash2 className="h-5 w-5 text-red-600" />
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                          <AlertDialogDescription>
                            This action cannot be undone. This will permanently delete the staff member.
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>Cancel</AlertDialogCancel>
                          <AlertDialogAction onClick={() => handleDeleteStaff(member.id)}>
                            Delete
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
};

export default Attendance;
,
import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Card, CardHeader, CardContent, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableRow } from "@/components/ui/table";
import { supabase } from "../supabase";
import { ChevronLeft } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";

const StaffAttendanceDetails = () => {
  const { id } = useParams();
  const [attendance, setAttendance] = useState([]);
  const [staff, setStaff] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    fetchStaffDetails();
    fetchAttendanceDetails();
  }, [id]);

  const fetchStaffDetails = async () => {
    const { data, error } = await supabase.from("staff").select("*").eq("id", id).single();
    if (error) {
      console.error("Error fetching staff details:", error);
    } else {
      setStaff(data);
    }
    setLoading(false);
  };

  const fetchAttendanceDetails = async () => {
    const { data, error } = await supabase
      .from("attendance")
      .select("*")
      .eq("staff_id", id)
      .order("date", { ascending: false });
    if (error) console.error("Error fetching attendance details:", error);
    else setAttendance(data);
  };

  return (
    <div>
      <Card className="bg-gray-50">
        <CardHeader>
          <div className="flex justify-between">
            {loading ? (
              <Skeleton className="w-[200px] h-[24px] rounded" />
            ) : (
              <CardTitle>Attendance Details for {staff?.name}</CardTitle>
            )}
            <Button variant="outline" onClick={() => navigate(-1)} className="mb-4">
              <ChevronLeft className="h-4 w-4" />
              Back
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div>
              <Skeleton className="w-full h-[20px] mb-4" />
              <Skeleton className="w-full h-[20px] mb-4" />
              <Skeleton className="w-full h-[20px] mb-4" />
            </div>
          ) : (
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Date</TableCell>
                  <TableCell>Status</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {attendance.map((entry) => (
                  <TableRow key={entry.id}>
                    <TableCell>{new Date(entry.date).toLocaleDateString()}</TableCell>
                    <TableCell>{entry.status ? "Present" : "Absent"}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default StaffAttendanceDetails;
, SUPABASE TABLE :
create table
  public.attendance (
    id uuid not null default extensions.uuid_generate_v4 (),
    staff_id uuid null,
    date date not null,
    status boolean not null,
    constraint attendance_pkey primary key (id),
    constraint attendance_staff_id_fkey foreign key (staff_id) references staff (id)
  ) tablespace pg_default;
  ,
  create table
  public.staff (
    id uuid not null default extensions.uuid_generate_v4 (),
    name text not null,
    constraint staff_pkey primary key (id)
  ) tablespace pg_default;
  , 
   add the below suggestions for the attendance system, several features can enhance its functionality, usability, and scalability: 
### 1. **Attendance Reports:**
   - Generate reports for individual staff members or the entire staff over a specific period.
   - Reports could include total days present, days absent, and attendance percentages.
   - Allow exporting reports as PDF or Excel files.

### 2. **Search and Filter:**
   - Add search functionality to filter attendance records by date range, status (present/absent), or specific staff members.
   - Implement advanced filtering options, like filtering by department or team if your organization has these structures.

### 3. **Leave Management Integration:**
   - Integrate leave management, where approved leaves are automatically marked as absent with leave status.
   - Allow staff to request leave directly from the system, and once approved, it automatically updates their attendance records.


### 4. **Custom Attendance Statuses:**
   - Instead of just "Present" or "Absent," allow custom statuses such as "Late," "On Leave," "Half-Day," etc.
   - These statuses could be color-coded in the UI for easier recognition.

### 5. **Time Tracking:**
   - Add time tracking features to monitor when employees check-in and check-out.
   - This could also integrate with the attendance system to mark partial attendance (e.g., half-day).

### 6. **Mobile Compatibility:**
   - Ensure the system is mobile-friendly, so staff can mark their attendance via mobile devices.




